
### **Funcionalidades clave**

#### 1. **Registro y Autenticaci√≥n de Usuarios**
   - **Descripci√≥n**: Implementa una funcionalidad para que los usuarios se registren y creen sus perfiles personales.
   - **Detalles**: 
     - Opciones de registro con correo electr√≥nico y redes sociales (Google, Facebook).
     - Autenticaci√≥n por tokens JWT.
     - Recuperaci√≥n de contrase√±a.
     - Posibilidad de agregar datos como g√©nero, edad, peso y altura durante el registro.

#### 2. **Seguimiento de Actividad Diaria**
   - **Descripci√≥n**: Permite a los usuarios registrar y hacer seguimiento de sus actividades f√≠sicas diarias, como caminar, correr, andar en bicicleta, etc.
   - **Detalles**: 
     - Registro manual o integraci√≥n con dispositivos y aplicaciones de salud (Fitbit, Google Fit, Apple Health).
     - Seguimiento de tiempo, distancia, calor√≠as quemadas y frecuencia card√≠aca (si es posible).
     - Visualizaci√≥n de progresos mediante gr√°ficos diarios/semanales/mensuales.

#### 3. **Establecimiento de Metas y Desaf√≠os**
   - **Descripci√≥n**: Los usuarios deben poder establecer metas de fitness, como perder peso, correr una cierta distancia, o realizar un n√∫mero de ejercicios al d√≠a.
   - **Detalles**: 
     - Objetivos personalizados como metas de pasos, calor√≠as quemadas, tiempo de ejercicio, etc.
     - Desaf√≠os comunitarios: permitir a los usuarios unirse a desaf√≠os con otros para alcanzar objetivos colectivos.
     - Alertas y recordatorios para mantener la motivaci√≥n.

#### 4. **Rutinas y Planes de Entrenamiento Personalizados**
   - **Descripci√≥n**: Ofrece a los usuarios rutinas de ejercicios adaptadas a sus objetivos y nivel de condici√≥n f√≠sica.
   - **Detalles**: 
     - Diferentes niveles de dificultad (principiante, intermedio, avanzado).
     - Planes personalizados basados en objetivos como "perder peso", "ganar m√∫sculo", "mejorar resistencia".
     - Opci√≥n de crear, guardar y compartir planes de entrenamiento personalizados.

#### 5. **Seguimiento de Progreso y M√©tricas de Salud**
   - **Descripci√≥n**: Los usuarios deben poder ver su progreso a lo largo del tiempo y visualizar estad√≠sticas clave.
   - **Detalles**: 
     - Gr√°ficos de peso, IMC, porcentaje de grasa corporal y otras m√©tricas relevantes.
     - Comparaci√≥n de actividad semanal, mensual o anual.
     - An√°lisis de patrones de actividad f√≠sica (mejor d√≠a de la semana, cantidad de tiempo activo vs. inactivo).

#### 6. **Consejos Personalizados de Nutrici√≥n y Salud**
   - **Descripci√≥n**: Proporciona consejos de nutrici√≥n y salud basados en el progreso del usuario. 
   - **Detalles**: 
     - Sugerencias personalizadas seg√∫n los objetivos (dieta para p√©rdida de peso, aumento de masa muscular, etc.).
     - Art√≠culos sobre fitness, bienestar y motivaci√≥n.
     - Posibilidad de integrar calculadoras de calor√≠as diarias, macronutrientes y sugerencias de planes de comidas.

#### 7. **Social y Gamificaci√≥n**
   - **Descripci√≥n**: Incorpora elementos sociales y de gamificaci√≥n para aumentar la motivaci√≥n del usuario.
   - **Detalles**: 
     - Sistema de recompensas o logros (ej. ‚ÄúPrimer marat√≥n completado‚Äù, ‚Äú100 d√≠as seguidos de actividad‚Äù).
     - Rankings globales o entre amigos.
     - Funcionalidad de compartir logros y progresos en redes sociales.
     - Chats o foros de usuarios para intercambiar consejos y experiencias.

#### 8. **Seguimiento del Sue√±o y Bienestar General**
   - **Descripci√≥n**: Ayuda a los usuarios a llevar un registro de su descanso y bienestar.
   - **Detalles**: 
     - Registro de horas de sue√±o, calidad del descanso.
     - Medici√≥n del nivel de estr√©s o estado de √°nimo diario.
     - Sugerencias de actividades para mejorar el bienestar, como meditaci√≥n o relajaci√≥n.

#### 9. **Integraci√≥n con Dispositivos de Terceros y API**
   - **Descripci√≥n**: Conecta la aplicaci√≥n con dispositivos de seguimiento de salud y actividad.
   - **Detalles**: 
     - Integraci√≥n con APIs como Google Fit, Apple Health, Fitbit para importar datos autom√°ticos de actividades f√≠sicas.
     - Sincronizaci√≥n de m√©tricas en tiempo real con dispositivos de fitness (pulseras de actividad, relojes inteligentes).

#### 10. **Panel de Control del Usuario (Dashboard)**
   - **Descripci√≥n**: Crea un panel donde los usuarios puedan visualizar de un vistazo toda su informaci√≥n de salud y fitness.
   - **Detalles**: 
     - Estad√≠sticas diarias (calor√≠as quemadas, pasos, distancia recorrida).
     - Visualizaci√≥n de metas y progreso actual.
     - Resumen de las actividades recientes y logros alcanzados.

---

### **Estructura del Proyecto (Backend y Frontend)**

#### **Frontend (React + TypeScript + Bootstrap)**

1. **Componentes principales**:
   - **Dashboard**: Mostrar√° las estad√≠sticas principales del usuario, como calor√≠as quemadas, pasos, horas de sue√±o, etc.
   - **Perfil del Usuario**: Informaci√≥n personal, objetivos y configuraci√≥n.
   - **Rutinas de Ejercicio**: P√°gina donde los usuarios seleccionan sus rutinas diarias o semanales.
   - **Registro de Actividad**: P√°gina para registrar manualmente actividades o sincronizar dispositivos.
   - **Historial y Progreso**: Visualizaci√≥n del historial de actividad f√≠sica y progreso en las metas.
   - **Consejos y Nutrici√≥n**: Acceso a consejos de salud y sugerencias de dieta.

2. **Componentes adicionales**:
   - **Gr√°ficos**: Utiliza librer√≠as de gr√°ficos como Chart.js o Recharts para mostrar el progreso.
   - **Notificaciones**: Muestra recordatorios y logros con alertas o notificaciones push (posible integraci√≥n con Firebase).

#### **Backend (Node.js + Express + MongoDB)**

1. **Modelos de datos (MongoDB)**:
   - **Usuario**: Informaci√≥n del perfil del usuario (nombre, edad, peso, altura, etc.).
   - **Actividad**: Registro de las actividades f√≠sicas (tipo de actividad, duraci√≥n, calor√≠as quemadas, fecha).
   - **Metas**: Datos de las metas del usuario (pasos diarios, calor√≠as, distancia).
   - **Progreso**: Historial de progreso para cada usuario.
   - **Rutinas**: Informaci√≥n sobre los planes de ejercicio personalizados o predise√±ados.

2. **API Endpoints (Express)**:
   - **/api/auth**: Registro, inicio de sesi√≥n y autenticaci√≥n JWT.
   - **/api/users**: CRUD de perfil de usuario y ajustes.
   - **/api/activities**: Registro y consulta de actividades f√≠sicas.
   - **/api/goals**: Establecimiento y seguimiento de metas.
   - **/api/progress**: Consulta del historial de progreso del usuario.  
   - **/api/plans**: CRUD de planes de ejercicio o nutrici√≥n.

3. **Servicios adicionales**:
   - **Notificaciones push**: Utiliza Firebase o un servicio similar para enviar notificaciones autom√°ticas (logros alcanzados, recordatorios de entrenamientos).
   - **Sincronizaci√≥n con APIs externas**: Integraci√≥n con Google Fit, Apple Health o Fitbit para importar datos autom√°ticos.

---

### **Caracter√≠sticas Extra Avanzadas**
- **Soporte multiling√ºe**: Expande tu aplicaci√≥n para que est√© disponible en varios idiomas.
- **Modo oscuro**: Opci√≥n para que los usuarios cambien el tema de la app.
- **Funcionalidad offline**: Utiliza almacenamiento local para que la app funcione incluso sin conexi√≥n.
- **Inteligencia artificial**: Implementa sugerencias personalizadas de ejercicios o rutinas basadas en el historial de actividad.


## PASOS PARA EL DESPLIEGUE A PRODUCCION DEL PORYECTO ##

   Antes de nada hay que definir los scripts en el archivo package.json del Frontend para construir el proyecto para poder desplegar la aplicaci√≥n en vercel :

          "scripts": {
         "dev": "vite",
         "build": "tsc -b && vite build",   //importante para poder realizar el deploy
         "lint": "eslint .",
         "preview": "vite preview"
      },

      -Ejecutar: npm run build dentro del frontend, para revisar si hay archivos con errores, corregirlos y despu√©s realizar el despliegue (normalmente son errores de variables declaradas pero no usadas etc...)

      *Cuando finalice se crear√° autom√°ticamente la carpeta dist dentro del Frontend que contiene todos los archivos de producci√≥n 


      -Ejecuta el comando de despliegue:

         vercel --prod

         PS C:\Users\David\Desktop\Proyectos personales con React\healtFitnessPro\Frontend> vercel --prod
         Vercel CLI 37.12.1
         ? Set up and deploy ‚Äú~\Desktop\Proyectos personales con React\healtFitnessPro\Frontend‚Äù? yes
         ? Which scope do you want to deploy to? David's projects
         ? Link to existing project? yes                                                                                -->SELECCIONO SI POR QUE POR ERROR YA LO CREE ANTES ...
         ? What‚Äôs the name of your existing project? healt-fitness-pro                                                  -->SELECCIONO EL NOMBRE DADO ANTERIORMENTE SI NO PONER UNO DE CERO O NOMBRE RECOMENDADO
         üîó  Linked to davids-projects-5a52dd2e/healt-fitness-pro (created .vercel and added it to .gitignore)
         üîç  Inspect: https://vercel.com/davids-projects-5a52dd2e/healt-fitness-pro/5DtGFHjTkanzyd3twti5cwF6NTJv [6s]
         ‚úÖ  Production: https://healt-fitness-kjt6azcr4-davids-projects-5a52dd2e.vercel.app [6s]
         PS C:\Users\David\Desktop\Proyectos personales con React\healtFitnessPro\Frontend> 

         *Cuando termine el proceso se crear√° la carpeta .vercel esta debe crearse dentro del frontend no dentro de la raiz principal del proyecto
            La carpeta .vercel contiene informaci√≥n sobre el proyecto y su configuraci√≥n espec√≠fica en Vercel

          importante revisar que esta carpeta no sea ignorada por git el el archivo .gitignore ya que Vercel tiene que tener
           acceso a la configuraci√≥n espec√≠fica del proyecto al hacer el despliegue.

         otra cosa importante revisar el network acces de la base de datos y permitir conexiones a las ips deseadas, como es un proyecto
         la dejo abierta poniendo en mongoDB dentro de network access -> Ip Adress: 0.0.0.0 (PRESS BUTTON: ALLOW ACCES FROM ANYWHERE)

         ##--IMPORTANTE--##   
         *Si en el futuro realizas cambios y necesitas desplegar de nuevo, simplemente ejecuta npm run build seguido de vercel --prod para enviar tus actualizaciones a producci√≥n.

         Vercel CLI 37.12.1
         üîç  Inspect: https://vercel.com/davids-projects-5a52dd2e/healt-fitness-pro/iquM9c1sY1xZ7K2UqkP3zA4914bD [2s]
         ‚úÖ  Production: https://healt-fitness-o2z31wvop-davids-projects-5a52dd2e.vercel.app [2s]


         
         




      INICIO DE ESTA MANERA PERO CREO LA CARPETA .VERCEL EN LA RAIZ Y VUELVO A EMPEZAR CON ESTA PARTE DE ARRIBA  


   1. Frontend: Modificaci√≥n de los endpoints de la API en el front (React) para que apunten a las URL finales, utilizar switch para modo desarrollo y modo production
      y evitar que apunten a las rutas locales de forma permanente

      const apiUrl = import.meta.env.MODE === 'production'
            ? import.meta.env.VITE_APP_API_URL_PRODUCTION
            : import.meta.env.VITE_APP_API_URL_LOCAL;

   2. Backend: Revisar que las configuraciones de CORS en el backend (archivo Server.ts) permitan peticiones desde el dominio de Vercel para evitar problemas de acceso.
               Tambi√©n configurar CORS para permitir las peticiones locales entre distintos puertos 

   3. Frontend: Crea un archivo .env para definir variables de entorno, como la URL de la API del backend en Vercel. 
      Luego, aseg√∫rate de que tu c√≥digo acceda a ellas usando process.env.REACT_APP_API_URL o similar.
   
   4. Backend: Define un archivo .env con las credenciales de MongoDB y la URL de frontend en producci√≥n. Utiliza un entorno seguro como MongoDB Atlas para bases de datos en la nube.

   5. REALIZAR DESPLIEGUE CON VERCEL CLI DESDE LA TERMINAL (HAY VARIAS FORMAS DE REALIZAR EL DEPLOY)

      1- Instalar vercel CLI: npm install -g vercel
            Esto instalar√° Vercel CLI de manera global en tu sistema, lo cual permite que puedas usar el comando vercel desde cualquier directorio.
      2- Ejecuta el siguiente comando para iniciar sesi√≥n en tu cuenta de Vercel desde la terminal:
            vercel login

            -Sigue las instrucciones, ingresando el correo electr√≥nico asociado a tu cuenta de Vercel. Esto vincular√° tu terminal con tu cuenta de Vercel.

            -Se abrir√° p√°gina con el siguiente mensaje:

                     √âxito de inicio de sesi√≥n de Vercel CLI
                     Vercel CLI se autentic√≥ con √©xito como: valenciano_david@hotmail.com
                     Ahora puede cerrar esta pesta√±a y volver a la CLI.
      3- Ubicarte en la Rama y Directorio Correcto

            Confirma que est√°s en la rama main de tu proyecto y en el directorio ra√≠z del proyecto en la terminal:

            git checkout main
            cd /ruta/de/tu/proyecto               

      4- Iniciar el Proceso de Despliegue

      Una vez en el directorio correcto, puedes iniciar el despliegue directamente con el siguiente comando:

         vercel

      Este comando despliega en el entorno de previsualizaci√≥n. Sin embargo, si quieres desplegar en producci√≥n directamente, usa:

         vercel --prod

         *Ejemplo:

         PS C:\Users\David\Desktop\Proyectos personales con React\healtFitnessPro> vercel
         Vercel CLI 37.12.1
         ? Set up and deploy ‚Äú~\Desktop\Proyectos personales con React\healtFitnessPro‚Äù? (Y/n)

         ? Set up and deploy ‚Äú~\Desktop\Proyectos personales con React\healtFitnessPro‚Äù? yes (empieza la configuraci√≥n y despliegue del proyecto al final)
         ? Which scope do you want to deploy to? David's projects
         ? Link to existing project? no                                                       (si no he a√±adido el proyecto desde vercel en add new proyect, pulsar no)
         ? What‚Äôs your project‚Äôs name? healt-fitness-pro                                      (elegir nombre del proyecto)
         ? In which directory is your code located? ./                                        (elegir carpeta del proyecto)
         Local settings detected in vercel.json:
         No framework detected. Default Project Settings:
         - Build Command: `npm run vercel-build` or `npm run build`
         - Development Command: None
         - Install Command: `yarn install`, `pnpm install`, `npm install`, or `bun install`
         - Output Directory: `public` if it exists, or `.`
         ? Want to modify these settings? no
         üîó  Linked to davids-projects-5a52dd2e/healt-fitness-pro (created .vercel and added it to .gitignore)
         üîç  Inspect: https://vercel.com/davids-projects-5a52dd2e/healt-fitness-pro/4RXjCZtmBfxEdvVVGPeBqNrcYoo1 [4s]
         ‚úÖ  Production: https://healt-fitness-nedm53tih-davids-projects-5a52dd2e.vercel.app [4s]
         üìù  Deployed to production. Run `vercel --prod` to overwrite later (https://vercel.link/2F).
         üí°  To change the domain or build command, go to https://vercel.com/davids-projects-5a52dd2e/healt-fitness-pro/settings
         PS C:\Users\David\Desktop\Proyectos personales con React\healtFitnessPro> 


      5- Configurar las variables de entorno en Vercel

         -modificar las variables de entorno en la p√°gina de vercel para el acceso a la base de datos y al servidor API en produccion, adem√°s de key si hay conexiones a api's externas...
         -modificar la variable de entorno de produccion en el archivo .env poner la url proporcionada por vercel al realizar el deploy, eje: VITE_APP_API_URL_PRODUCTION=https://healt-fitness-pro.vercel.app



